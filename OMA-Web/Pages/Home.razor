@page "/"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims
@inject NavigationManager Navigation
@inject IAccessTokenProvider AccessTokenProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
<PageTitle>Windmills</PageTitle>
<AuthorizeView >
    <h3>Data Fetching</h3>

    <button @onclick="GetAccessToken">Get Access Token</button>

    <p>@accessToken</p>
</AuthorizeView>
<div>
    <input placeholder="Search..." @bind="searchText" class="form-control searchbar" />
</div>

<div class="home col-12 d-flex flex-column mt-5">
    <div class="flex-row d-flex justify-content-evenly">
        @foreach (var island in islandDTOs.Where(x => x.Title.ToLower().Contains(searchText.ToLower())).ToList())
        {
            <div class="card" @onclick="() => {Redirect(island.IslandID);}">
                <div class="card-title ">
                    <h2>@island.Title</h2>
                </div>
                <div class="card-body success">
                    <h5>High Priority</h5>
                    @if (turbineDTOs.Any(x => x.IslandID == island.IslandID))
                    {
                        foreach (var item in tasksDTOs.Where(x => x.TurbineID == turbineDTOs.Where(x => x.IslandID == island.IslandID).First().TurbineID && x.Level == LevelEnum.Hotline3).Take(5))
                        {
                            <p>@item.Title</p>
                        }
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    private IEnumerable<IslandDTO> islandDTOs = [];
    private IEnumerable<TaskDTO> tasksDTOs = [];
    private IEnumerable<TurbineDTO> turbineDTOs = [];

    private string searchText = string.Empty;

    //TODO: DEbug code for token
    #region debug token code
    private ClaimsPrincipal user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var isAdmin = user.IsInRole("Hotline-User"); // Check for a specific role
                                                         // Perform actions based on role
        }

        
        try
        {
            islandDTOs = await client.GetIslandsAsync();
        }
        catch (Exception)
        {
            toastService.ShowInfo("There are no islands..");
        }

        try
        {
            tasksDTOs = await client.GetUncompletedTasksAsync();
            turbineDTOs = await client.GetTurbinesAsync();
        }
        catch (Exception)
        {

        }       
    }

    private string accessToken;

    private async Task GetAccessToken()
    {
        var result = await AccessTokenProvider.RequestAccessToken();

        if (result.TryGetToken(out var token))
        {
            accessToken = token.Value; // This is the access token
        }
        else
        {
            accessToken = "No access token available.";
        }
    }

    #endregion

    public void Redirect(int id)
    {
        Navigation.NavigateTo("/windmills/" + id);
    }
}





