@page "/windmills/{id:int}"
@inject OMAClient client
@inject IToastService toastService
@inject NavigationManager NavigationManager

<div>
    <input @bind="searchText" placeholder="Search..." class="form-control searchbar" />
</div>

<div class="mb-2">
    <button class="return-btn" onclick="history.back()">← Return</button>
</div>

<div class="windmills col-12 flex-column">
    <div class="col-12 flex-row d-flex">
        @if (turbineDTOs.Count() != 0)
        {
            @foreach (var item in turbineDTOs.Where(x => x.Title.ToLower().Contains(searchText.ToLower())).ToList())
            {
                <div class="card me-5 mb-5" @onclick="async () => {await ShowWindmill(item);}">
                    <div class="card-title ">
                        <h2>@item.Title</h2>
                    </div>
                    @if (deviceDTOs.Any(x => x.TurbineID == item.TurbineID && x.State == StateEnum._2))
                    {
                        <div class="card-body error">
                            @foreach (var task in tasksDTOs.Where(x => x.TurbineID == item.TurbineID))
                            {
                                <h5>@task.Title</h5>
                            }
                        </div>
                    }
                    else {
                        <div class="card-body success">
                            @foreach (var task in tasksDTOs.Where(x => x.TurbineID == item.TurbineID))
                            {
                                <h5>@task.Title</h5>
                            }
                        </div>
                    }
                </div>
            }
        }
    </div>
</div>


<Modal @ref="modal" title="Modal title">

    <BodyTemplate>
        <div class="windmillmodal"> 
            <h5>Telemetry</h5>
            <div class="box">
                @foreach (var data in turbineData[item.TurbineID])
                {
                    <h5>@($"{data.Attributes.FirstOrDefault().Name}: {data.Attributes.FirstOrDefault().Value}")</h5>
                }
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <div class="d-flex flex-row">
            @if (deviceDTOs.Any(x => x.TurbineID == item.TurbineID && x.State == StateEnum._2))
            {
                <input value="Turn On" type="button" class="form-control" @onclick="async () => {await TurnOnTurbine();}" />
            }
            else
            {
                <input value="Shutdown" type="button" class="form-control" @onclick="async () => {await ShutDownTurbine();}" />
            }
        </div>
    </FooterTemplate>
</Modal>

@code {
    private Modal modal = default!;

    [Parameter]
    public int ID { get; set; }

    private string searchText = string.Empty;

    public IEnumerable<TurbineDTO> turbineDTOs = [];
    public IEnumerable<TaskDTO> tasksDTOs = [];
    public Dictionary<int, List<DeviceData>> turbineData = [];
    public List<DeviceDTO> deviceDTOs = [];

    private TurbineDTO item = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            turbineDTOs = await client.GetTurbinesIslandAsync(ID);
        }
        catch (Exception)
        {
            toastService.ShowInfo("There are no turbines on this island..");
        }

        try
        {
            turbineData = await client.GetTurbinesLatestDatasAsync();
        }
        catch (Exception)
        {
            toastService.ShowInfo("There are no data collected..");
        }

        try
        {
            tasksDTOs = await client.GetUncompletedTasksAsync();
        }
        catch (Exception)
        {
            toastService.ShowInfo("There are no uncompleted tasks..");
        }
        await UpdateDevices();
    }

    public async Task ShutDownTurbine()
    {
        await client.ActionTurbineAsync(item.TurbineID, "ChangeState", 2);
        toastService.ShowInfo(item.Title + " has been shutdown");
        await UpdateDevices();
    }

    public async Task TurnOnTurbine()
    {
        await client.ActionTurbineAsync(item.TurbineID, "ChangeState", 1);
        toastService.ShowInfo(item.Title + " has been turned on");
        await UpdateDevices();
    }

    public async Task UpdateDevices() 
    {
        try
        {
            var deviceList = await client.GetDevicesAsync();
            deviceDTOs = deviceList.ToList();
        }
        catch (Exception)
        {
            toastService.ShowInfo("There are no devices..");
        }
    }

    public async Task ShowWindmill(TurbineDTO item)
    {
        this.item = item;
        await modal.ShowAsync();
    }
}
