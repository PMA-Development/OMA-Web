@page "/windmills/{id:int}"
@using System.Globalization

@implements IDisposable
@inject OMAClient client
@inject IToastService toastService
@inject NavigationManager NavigationManager
@inject DeviceDataWatchdog Watchdog
<div>
    <input @bind="searchText" placeholder="Search..." class="form-control searchbar" />
</div>

<div class="mb-2">
    <button class="return-btn" onclick="history.back()">← Return</button>
</div>

<div class="windmills col-12 flex-column">
    <div class="col-12 flex-row d-flex">
        @if (turbineDTOs.Count() != 0)
        {
            @foreach (var item in turbineDTOs.Where(x => x.Title.ToLower().Contains(searchText.ToLower())).ToList())
            {
                <div class="card me-5 mb-5" @onclick="async () => {await ShowWindmill(item);}">
                    <div class="card-title ">
                        <h2>@item.Title</h2>
                    </div>
                    @if (deviceDTOs.Any(x => x.TurbineID == item.TurbineID && x.State == StateEnum.Off))
                    {
                        <div class="card-body error">
                            @foreach (var task in tasksDTOs.Where(x => x.TurbineID == item.TurbineID))
                            {
                                <h5>@task.Title</h5>
                            }
                        </div>
                    }
                    else {
                        <div class="card-body success">
                            @foreach (var task in tasksDTOs.Where(x => x.TurbineID == item.TurbineID))
                            {
                                <h5>@task.Title</h5>
                            }
                        </div>
                    }
                </div>
            }
        }
    </div>
</div>


<Modal @ref="modal" Title="Live Data" Size="ModalSize.Large" OnHidden="OnModalHidden">

    <BodyTemplate>
        <div class="windmillmodal">
            <div class="box">
                @foreach (var data in turbineData[item.TurbineID])
                {
                    <h5>@($"{data.Attributes.FirstOrDefault().Name}: {data.Attributes.FirstOrDefault().Value}")</h5>
                }
            </div>
            <div class="box"> 
                <div class="control-section" align='center'>
                    <RadzenLabel Text="Start Date" Component="RadzenDatePickerChangeEvent" />
                    <RadzenDatePicker ValueChanged="async e => {await StartDateChanged(e.Value);}" TValue="DateTime?" Value=@startDateTime Change="@(args => startDateTime = args)" Name="RadzenDatePickerChangeEvent" />
                    <RadzenLabel Text="End date" Component="RadzenDatePickerChangeEvent" />
                    <RadzenDatePicker ValueChanged="async e => {await EndDateChanged(e.Value);}" TValue="DateTime?" Value=@endDateTime Change="@(args => endDateTime = args)" Name="RadzenDatePickerChangeEvent" />

                    <RadzenCard class="pb-0 ps-5" Style="display: flex; align-items: center; gap: 0.5rem;width:fit-content;box-shadow:none;">
                        <RadzenCheckBox @bind-Value="@smoothDevice" Name="smooth"></RadzenCheckBox>
                        <RadzenLabel Text="Smooth" For="smooth" Style="margin-right: 1rem;" />
                        <RadzenCheckBox @bind-Value="@showDataLabelsDevice" Name="dataLabels"></RadzenCheckBox>
                        <RadzenLabel Text="Show Data Labels" For="dataLabels" />
                    </RadzenCard>
                    <RadzenChart>
                        <RadzenLineSeries Smooth="@smoothDevice" Data="@TemperatureData" CategoryProperty="Timestamp" Title="Temperature" LineType="LineType.Solid" ValueProperty="Value">
                            <RadzenMarkers MarkerType="MarkerType.Square" />
                            <RadzenSeriesDataLabels Visible="@showDataLabelsDevice" />
                        </RadzenLineSeries>
                        <RadzenLineSeries Smooth="@smoothDevice" Data="@HumidityData" CategoryProperty="Timestamp" Title="Humidity" LineType="LineType.Solid" ValueProperty="Value">
                            <RadzenMarkers MarkerType="MarkerType.Circle" />
                            <RadzenSeriesDataLabels Visible="@showDataLabelsDevice" />
                        </RadzenLineSeries>
                        <RadzenLineSeries Smooth="@smoothDevice" Data="@AmpData" CategoryProperty="Timestamp" Title="Amp" LineType="LineType.Solid" ValueProperty="Value">
                            <RadzenMarkers MarkerType="MarkerType.Diamond" />
                            <RadzenSeriesDataLabels Visible="@showDataLabelsDevice" />
                        </RadzenLineSeries>
                        <RadzenLineSeries Smooth="@smoothDevice" Data="@VoltageData" CategoryProperty="Timestamp" Title="Voltage" LineType="LineType.Solid" ValueProperty="Value">
                            <RadzenMarkers MarkerType="MarkerType.Triangle" />
                            <RadzenSeriesDataLabels Visible="@showDataLabelsDevice" />
                        </RadzenLineSeries>
                        <RadzenCategoryAxis Padding="20" />
                        <RadzenValueAxis>
                            <RadzenGridLines Visible="true" />
                            <RadzenAxisTitle Text="Device Data" />
                        </RadzenValueAxis>
                    </RadzenChart>

                </div>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <div class="d-flex flex-row">
            @if (deviceDTOs.Any(x => x.TurbineID == item.TurbineID && x.State == StateEnum.Off))
            {
                <input value="Turn On" type="button" class="form-control" @onclick="async () => {await TurnOnTurbine();}" />
            }
            else
            {
                <input value="Shutdown" type="button" class="form-control" @onclick="async () => {await ShutDownTurbine();}" />
            }
        </div>
    </FooterTemplate>
</Modal>

@code {
    private Modal modal = default!;

    [Parameter]
    public int ID { get; set; }

    private string searchText = string.Empty;

    private IEnumerable<TurbineDTO> turbineDTOs = [];
    private IEnumerable<TaskDTO> tasksDTOs = [];
    private Dictionary<int, List<DeviceData>> turbineData = [];
    private List<DeviceDTO> deviceDTOs = [];

    private IEnumerable<DeviceDataGraphDTO> deviceDataGraphDTOs = [];

    private List<DeviceDataGraphDTO> TemperatureData = [];
    private List<DeviceDataGraphDTO> HumidityData = [];
    private List<DeviceDataGraphDTO> VoltageData = [];
    private List<DeviceDataGraphDTO> AmpData = [];

    private DateTime? startDateTime = DateTime.Now.AddDays(-1);
    private DateTime? endDateTime = DateTime.Now;

    bool smoothDevice = false;
    bool showDataLabelsDevice = false;

    private TurbineDTO item = new();

    private void OnDeviceDataChanged(object? obj, DeviceDataStatusChanged changed) 
    {
        turbineData = changed.DeviceData;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            turbineDTOs = await client.GetTurbinesIslandAsync(ID);
        }
        catch (Exception)
        {
            toastService.ShowInfo("There are no turbines on this island..");
        }

        try
        {
            turbineData = await client.GetTurbinesLatestDatasAsync();
        }
        catch (Exception)
        {
            toastService.ShowInfo("There are no data collected..");
        }

        try
        {
            tasksDTOs = await client.GetUncompletedTasksAsync();
        }
        catch (Exception)
        {
            toastService.ShowInfo("There are no uncompleted tasks..");
        }
        await UpdateDevices();
    }

    public async Task ShutDownTurbine()
    {
        await client.ActionTurbineAsync(item.TurbineID, "ChangeState", 2);
        toastService.ShowInfo(item.Title + " has been shutdown");
        await UpdateDevices();
    }

    public async Task TurnOnTurbine()
    {
        await client.ActionTurbineAsync(item.TurbineID, "ChangeState", 1);
        toastService.ShowInfo(item.Title + " has been turned on");
        await UpdateDevices();
    }

    public async Task UpdateDevices() 
    {
        try
        {
            var deviceList = await client.GetDevicesAsync();
            deviceDTOs = deviceList.ToList();
        }
        catch (Exception)
        {
            toastService.ShowInfo("There are no devices..");
        }
    }

    public async Task ShowWindmill(TurbineDTO item)
    {
        Watchdog.DeviceDataStatusChanged += OnDeviceDataChanged;
        _ = Watchdog.StartWatchdog();
        StateHasChanged();

        try
        {
            deviceDataGraphDTOs = await client.GetDeviceDataGraphByTurbineIdAsync(item.TurbineID, DateTime.Now.AddDays(-1), DateTime.Now);
        }
        catch (Exception)
        {
            toastService.ShowInfo("There are no device data..");
        }
        OriantData(deviceDataGraphDTOs);

        this.item = item;
        await modal.ShowAsync();
    }

    public void OriantData(IEnumerable<DeviceDataGraphDTO> list)
    {
        foreach (var deviceData in list)
        {
            switch (deviceData.Name)
            {
                case "Temperature":
                    TemperatureData.Add(deviceData);
                    break;
                case "Humidity":
                    HumidityData.Add(deviceData);
                    break;
                case "Voltage":
                    VoltageData.Add(deviceData);
                    break;
                case "AMP":
                    AmpData.Add(deviceData);
                    break;
                default:
                    break;
            }
        }
        TemperatureData = SetListDistinc(TemperatureData);
        HumidityData = SetListDistinc(HumidityData);
        VoltageData = SetListDistinc(VoltageData);
        AmpData = SetListDistinc(AmpData);
    }

    public async Task StartDateChanged(DateTime dateTime) {
        if (dateTime < endDateTime)
        {
            startDateTime = dateTime;
            await DatePickerChange(dateTime);
        }
    }

    public async Task EndDateChanged(DateTime dateTime)
    {
        if (dateTime > startDateTime && dateTime <= DateTime.Now)
        {
            endDateTime = dateTime;
            await DatePickerChange(dateTime);
        }   
    }

    public async Task DatePickerChange(DateTime datetime)
    {
        try
        {
            deviceDataGraphDTOs = await client.GetDeviceDataGraphByTurbineIdAsync(item.TurbineID, startDateTime, endDateTime);
        }
        catch (Exception)
        {
            toastService.ShowInfo("There is no graph data..");
        }
        OriantData(deviceDataGraphDTOs);
    }

    public List<DeviceDataGraphDTO> SetListDistinc(List<DeviceDataGraphDTO> myList) {
        var tempList = new List<DeviceDataGraphDTO>();
        double previous = 0;
        DateTime previousTime = new DateTime();
        foreach (var temp in myList)
        {
            if (previousTime.AddMinutes(10) < temp.Timestamp)
            {
                if (previous != temp.Value)
                {
                    tempList.Add(temp);
                }
            }
            previousTime = temp.Timestamp;
            previous = temp.Value;
        }
        return tempList; 
    }

    public async Task OnModalHidden()
    {
        Watchdog.Dispose();
        await modal.HideAsync();
    }

    void IDisposable.Dispose() {
        Watchdog.Dispose();
    }
}
