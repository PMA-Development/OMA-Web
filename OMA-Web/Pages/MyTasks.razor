@page "/mytasks"

<div class="mb-5">
    <input @bind="searchText" placeholder="Search..." class="form-control searchbar" />
</div>


<div class="mytasks col-12 flex-column ">
    <div class="col-12 flex-row d-flex justify-content-between">
        @foreach (var item in taskDTOs.Where(x =>x.Title.ToLower().Contains(searchText.ToLower())).ToList())
        {
            <div class="card me-5 mb-5">
                <div class="card-title">
                    <h5>@item.Title</h5>
                </div>
                <div class="card-body">
                    <h5><b>Type:</b> @item.Type</h5>
                    <h5><b>Level:</b> @item.Level.ToString().Replace("_", "")</h5>
                    <h5><b>Description:</b> @item.Description</h5>
                    <div class="d-flex justify-content-evenly mt-3">
                        <input type="button" class="btn btn-primary" value="View" @onclick="async () => {await ShowTasks(item);}" />
                        <input type="button" class="btn btn-primary" value="Escalate" @onclick="() => {ToggleDisplay(item.TaskID);}" />
                        @if (droneDTOs.Any(x => x.TaskID == item.TaskID))
                        {
                            <input type="button" class="btn btn-primary" value="Return Drone" @onclick="async e => {await ReturnDrone(item.TaskID);}" />
                        }
                        else {
                            <input type="button" class="btn btn-primary" value="Send Drone" @onclick="async e => {await SendOutDrone(item.TaskID);}" />
                        }

                        <select class="btn btn-success dropdown-toggle" @onchange="async e => {await Escalate(item, e.Value!.ToString()!);}" style="display: @(GetDisplayStyle(item.TaskID))">
                            @foreach (var level in Enum.GetValues<LevelEnum>())
                            {
                                @if (level == item.Level)
                                {
                                    <option value="@level" selected>@level.ToString().Replace("_", "")</option>
                                }
                                else
                                {
                                    <option value="@level">@level.ToString().Replace("_", "")</option>
                                }

                            }
                        </select>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<Modal @ref="modal">
    <BodyTemplate>
        <div class="myTaskModel text-center">
            <label>Finishing statements: </label>
            <div>
                <InputTextArea @bind-Value="description" style="max-height:30rem" rows="4"></InputTextArea>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <div class="d-flex flex-row me-3 mt-3">
            <input value="Finish" type="button" class="btn btn-primary me-3" @onclick="Finish" />
            <input value="Save" type="button" class="btn btn-primary" @onclick="Save" />
        </div>
    </FooterTemplate>
</Modal>

@code {
    private BlazorBootstrap.Modal modal = default!;

    private List<TaskDTO> taskDTOs = [];

    private IEnumerable<DroneDTO> droneDTOs = [];

    private string searchText = string.Empty;

    private string description = string.Empty;

    private TaskDTO item;

    protected override async Task OnInitializedAsync()
    {
        string claim = string.Empty;
        try
        {
            var authState = await AuthenticationStateProviders.GetAuthenticationStateAsync();
            var user = authState.User;
            claim = user.FindFirst(x => x.Type == "sub")!.Value;

        }
        catch (Exception e)
        {
            throw;
        }

        try
        {
            var list = await client.GetUserTasksAsync(Guid.Parse(claim));
            taskDTOs = list.ToList();
        }
        catch (Exception)
        {
            toastService.ShowInfo("There are no tasks..");
        }

        try
        {
            droneDTOs = await client.GetDronesAsync();
        }
        catch (Exception)
        {
            toastService.ShowInfo("There are no available drones..");
        }
    }

    public async Task SendOutDrone(int id) 
    {
        try
        {
            var drone = droneDTOs.Where(x => x.Available == true && x.TaskID == 0).FirstOrDefault();
            drone!.TaskID = id;
            drone.Available = false;
            await client.UpdateDroneAsync(drone);
        }
        catch (Exception)
        {
            toastService.ShowInfo("There are no available drones..");
        }
    }

    public async Task ReturnDrone(int id)
    {
        var drone = droneDTOs.Where(x => x.Available == false && x.TaskID == id).FirstOrDefault();
        drone!.TaskID = 0;
        drone.Available = true;
        await client.UpdateDroneAsync(drone);
    }

    public async Task Escalate(TaskDTO item, string level)
    {
        Enum.TryParse(level, out LevelEnum levelEnum);
        item.Level = levelEnum;
        await client.UpdateTaskAsync(item);
    }

    private Dictionary<int, bool> DisplayStates = new Dictionary<int, bool>();

    private void ToggleDisplay(int link)
    {
        if (DisplayStates.ContainsKey(link))
        {
            DisplayStates[link] = !DisplayStates[link];
        }
        else
        {
            DisplayStates[link] = true;
        }
    }

    private string GetDisplayStyle(int link)
    {
        return DisplayStates.ContainsKey(link) && DisplayStates[link] ? "block" : "none";
    }

    private async Task ShowTasks(TaskDTO item)
    {
        this.item = item;
        description = item.FinishDescription;
        await modal.ShowAsync();
    }

    public async Task Save()
    {
        item.FinishDescription = description;
        await client.UpdateTaskAsync(item);
        toastService.ShowSuccess("Successfully saved..");
        await modal.HideAsync();
    }

    public async Task Finish()
    {
        item.IsCompleted = true;
        item.FinishDescription = description;
        await client.UpdateTaskAsync(item);
        taskDTOs.Remove(item);
        toastService.ShowSuccess("Successfully finished..");
        await modal.HideAsync();
    }
}
