@inject OMAClient client

<div class="windmillmodal">
    <h5>Telemetry</h5>
    <div class="box">
        <p>Temperature: 24C</p>
        <p>Fugtighed: 19%</p>
        <p>Acceleration: 25mps</p>
        <p>Vibrationer: 45hz</p>
        <p>Rotationer: 25rpm</p>
    </div>
    <div class="d-flex flex-row">
        @if (deviceDTOs.Any(x => x.TurbineID == item.TurbineID && x.State == StateEnum._2))
        {
            <input value="Turn On" type="button" class="form-control" @onclick="async () => {await TurnOnTurbine();}" />
        }
        else {
            <input value="Shutdown" type="button" class="form-control" @onclick="async () => {await ShutDownTurbine();}" />
        }
    </div>
</div>


@code {
    [Parameter]
    public int WindmillID { get; set; }

    [Parameter]
    public IEnumerable<DeviceDTO> deviceDTOs { get; set; }

    private TurbineDTO item = new();

    protected override async Task OnInitializedAsync()
    {
        item = await client.GetTurbineAsync(WindmillID);
    }

    public async Task ShutDownTurbine()
    {
        await client.ActionTurbineAsync("ChangeState", 2, item);
        toastService.ShowInfo(item.Title + " has been shutdown");
    }

    public async Task TurnOnTurbine()
    {
        await client.ActionTurbineAsync("ChangeState", 1, item);
        toastService.ShowInfo(item.Title + " has been turned on");
    }
}
