@page "/admin/alarms/"
@inject OMAClient client

<RadzenDataGrid @ref="alarmGrid" AllowAlternatingRows="false" EditMode="@editMode"
                Data="@alarms" TItem="AlarmConfigDTO" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px"
                FilterMode="FilterMode.Simple" AllowVirtualization="true" Style="height:90vh"
                AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                AllowSorting="true">

    <HeaderTemplate>
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add New Alarm" Click="@InsertRow" Disabled="@(editMode == DataGridEditMode.Single && alarmsToInsert.Count() > 0)" />
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn Property="@nameof(AlarmConfigDTO.AlarmConfigID)" Title="Alarmconfig ID" Width="120px" Frozen="true" />
        <RadzenDataGridColumn Property="@nameof(AlarmConfigDTO.MinTemperature)" Title="Min Temperatur">
            <Template Context="alarm">
                @String.Format("{0}°C", alarm.MinTemperature)
            </Template>
            <EditTemplate Context="alarm">
                <RadzenNumeric @bind-Value="alarm.MinTemperature" Style="width:100%" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select temperatur" }})" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(AlarmConfigDTO.MaxTemperature)" Title="Max Temperatur">
            <Template Context="alarm">
                @String.Format("{0}°C", alarm.MaxTemperature)
            </Template>
            <EditTemplate Context="alarm">
                <RadzenNumeric @bind-Value="alarm.MaxTemperature" Style="width:100%" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select temperatur" }})" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(AlarmConfigDTO.MinHumidity)" Title="Min Humidity">
            <Template Context="alarm">
                @String.Format("{0}%", alarm.MinHumidity)
            </Template>
            <EditTemplate Context="alarm">
                <RadzenNumeric @bind-Value="alarm.MinHumidity" Style="width:100%" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select humidity" }})" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(AlarmConfigDTO.MaxHumidity)" Title="Max Humidity">
            <Template Context="alarm">
                @String.Format("{0}%", alarm.MaxHumidity)
            </Template>
            <EditTemplate Context="alarm">
                <RadzenNumeric @bind-Value="alarm.MaxHumidity" Style="width:100%" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select humidity" }})" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(AlarmConfigDTO.MinAirPressure)" Title="Min Air Pressure">
            <Template Context="alarm">
                @String.Format("{0}bar", alarm.MinAirPressure)
            </Template>
            <EditTemplate Context="alarm">
                <RadzenNumeric @bind-Value="alarm.MinAirPressure" Style="width:100%" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select air pressure" }})" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(AlarmConfigDTO.MaxAirPressure)" Title="Max Air Pressure">
            <Template Context="alarm">
                @String.Format("{0}bar", alarm.MaxAirPressure)
            </Template>
            <EditTemplate Context="alarm">
                <RadzenNumeric @bind-Value="alarm.MaxAirPressure" Style="width:100%" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select air pressure" }})" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Property="@nameof(AlarmConfigDTO.IslandID)" Title="Island" Width="280px">
            <EditTemplate Context="alarm">
                <RadzenDropDown @bind-Value="alarm.IslandID" Data="@islands" TextProperty="@nameof(IslandDTO.Title)" ValueProperty="@nameof(IslandDTO.IslandID)" Style="width:100%; display: block;"
                                InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select island" }})" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Context="alarm" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="alarm">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" Click="@(args => EditRow(alarm))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="Radzen.ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(alarm))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="alarm">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" Click="@((args) => SaveRow(alarm))" aria-label="Save">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(alarm))" aria-label="Cancel">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="Radzen.ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(alarm))" aria-label="Delete">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>

@code {

    RadzenDataGrid<AlarmConfigDTO> alarmGrid;
    List<AlarmConfigDTO> alarms;
    IEnumerable<IslandDTO> islands;

    DataGridEditMode editMode = DataGridEditMode.Single;

    List<AlarmConfigDTO> alarmsToInsert = [];
    List<AlarmConfigDTO> alarmsToUpdate = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var listAlarm = await client.GetAlarmConfigsAsync();
            alarms = listAlarm.ToList();
        }
        catch (Exception)
        {
            toastService.ShowInfo("There are no alarms..");
        }

        try
        {
            islands = await client.GetIslandsAsync();
        }
        catch (Exception)
        {
        }
    }

    public void Reset()
    {
        alarmsToInsert.Clear();
        alarmsToUpdate.Clear();
    }

    public void Reset(AlarmConfigDTO alarm)
    {
        alarmsToInsert.Remove(alarm);
        alarmsToUpdate.Remove(alarm);
    }

    public async Task EditRow(AlarmConfigDTO alarm)
    {
        if (editMode == DataGridEditMode.Single && alarmsToInsert.Count() > 0)
        {
            Reset();
        }

        alarmsToUpdate.Add(alarm);
        await alarmGrid.EditRow(alarm);
    }

    public async Task OnUpdateRow(AlarmConfigDTO alarm)
    {
        Reset(alarm);

        await client.UpdateAlarmConfigAsync(alarm);
    }

    public async Task SaveRow(AlarmConfigDTO alarm)
    {
        await alarmGrid.UpdateRow(alarm);
    }

    public void CancelEdit(AlarmConfigDTO alarm)
    {
        Reset(alarm);

        alarmGrid.CancelEditRow(alarm);
    }

    public async Task DeleteRow(AlarmConfigDTO alarm)
    {
        Reset(alarm);

        if (alarms.Contains(alarm))
        {
            await client.DeleteAlarmConfigAsync(alarm.AlarmConfigID);
            alarms.Remove(alarm);
            await alarmGrid.Reload();
        }
        else
        {
            alarmGrid.CancelEditRow(alarm);
            await alarmGrid.Reload();
        }
    }

    public async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var alarm = new AlarmConfigDTO();
        alarmsToInsert.Add(alarm);
        await alarmGrid.InsertRow(alarm);
    }

    public async Task OnCreateRow(AlarmConfigDTO alarm)
    {
        var id = await client.AddAlarmConfigAsync(alarm);
        alarm.AlarmConfigID = id;
        alarms.Add(alarm);
        alarmsToInsert.Remove(alarm);
    }
}
