@page "/admin/turbines/"
@inject OMAClient client

<RadzenDataGrid @ref="turbineGrid" AllowAlternatingRows="false" EditMode="@editMode"
                Data="@turbines" TItem="TurbineDTO" RowUpdate="@OnUpdateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px"
                FilterMode="FilterMode.Simple" AllowVirtualization="true" Style="height:90vh"
                AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                AllowSorting="true">
    <Columns>
        <RadzenDataGridColumn Property="@nameof(TurbineDTO.TurbineID)" Title="Turbine ID" Width="120px" Frozen="true" />
        <RadzenDataGridColumn Property="@nameof(TurbineDTO.Title)" Title="Title">
            <EditTemplate Context="turbine">
                <RadzenTextBox @bind-Value="turbine.Title" Style="width:200px; display: block" Name="Title" aria-label="Enter Title" />
                <RadzenRequiredValidator Text="Title is required" Component="Title" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Context="turbine" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="turbine">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" Click="@(args => EditRow(turbine))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="Radzen.ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(turbine))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="turbine">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" Click="@((args) => SaveRow(turbine))" aria-label="Save">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(turbine))" aria-label="Cancel">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="Radzen.ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(turbine))" aria-label="Delete">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {

    RadzenDataGrid<TurbineDTO> turbineGrid;
    IEnumerable<TurbineDTO> turbines;

    DataGridEditMode editMode = DataGridEditMode.Single;

    List<TurbineDTO> turbinesToInsert = [];
    List<TurbineDTO> turbinesToUpdate = [];

    protected override async Task OnInitializedAsync()
    {
        // users = await client.GetUsersAsync();
        var turbineList = new List<TurbineDTO>();
        turbineList.Add(new TurbineDTO { TurbineID = 1, Title = "A1" });
        turbines = turbineList;
    }

    void Reset()
    {
        turbinesToInsert.Clear();
        turbinesToUpdate.Clear();
    }

    void Reset(TurbineDTO turbine)
    {
        turbinesToInsert.Remove(turbine);
        turbinesToUpdate.Remove(turbine);
    }

    async Task EditRow(TurbineDTO turbine)
    {
        if (editMode == DataGridEditMode.Single && turbinesToInsert.Count() > 0)
        {
            Reset();
        }

        turbinesToUpdate.Add(turbine);
        await turbineGrid.EditRow(turbine);
    }

    void OnUpdateRow(TurbineDTO turbine)
    {
        Reset(turbine);

        // dbContext.Update(log);

        // dbContext.SaveChanges();
    }

    async Task SaveRow(TurbineDTO turbine)
    {
        await turbineGrid.UpdateRow(turbine);
    }

    void CancelEdit(TurbineDTO turbine)
    {
        Reset(turbine);

        turbineGrid.CancelEditRow(turbine);

        // var orderEntry = dbContext.Entry(log);
        // if (orderEntry.State == EntityState.Modified)
        // {
        //     orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //     orderEntry.State = EntityState.Unchanged;
        // }
    }

    async Task DeleteRow(TurbineDTO turbine)
    {
        Reset(turbine);

        if (turbines.Contains(turbine))
        {
            // dbContext.Remove<Log>(log);

            // dbContext.SaveChanges();

            await turbineGrid.Reload();
        }
        else
        {
            turbineGrid.CancelEditRow(turbine);
            await turbineGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var turbine = new TurbineDTO();
        turbinesToInsert.Add(turbine);
        await turbineGrid.InsertRow(turbine);
    }

    public async Task OnCreateRow(TurbineDTO turbine)
    {
        // var id = await client.AddUserAsync(island);
        turbinesToInsert.Remove(turbine);
    }
}
