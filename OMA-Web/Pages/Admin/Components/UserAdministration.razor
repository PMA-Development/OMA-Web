@page "/admin/users/"
@inject OMAClient client

<RadzenDataGrid @ref="userGrid" AllowAlternatingRows="false" EditMode="@editMode"
                Data="@users" TItem="UserDTO" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px"
                FilterMode="FilterMode.Simple" AllowVirtualization="true" Style="height:90vh"
                AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                AllowSorting="true">

    <HeaderTemplate>
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add New User" Click="@InsertRow" Disabled="@(editMode == DataGridEditMode.Single && usersToInsert.Count() > 0)" />
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn Property="@nameof(User.UserID)" Title="User ID" Width="120px" Frozen="true" />
        <RadzenDataGridColumn Property="@nameof(User.FullName)" Title="Full Name">
            <EditTemplate Context="user">
                <RadzenTextBox @bind-Value="user.FullName" Style="width:200px; display: block" Name="FullName" aria-label="Enter full name" />
                <RadzenRequiredValidator Text="Full name is required" Component="FullName" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(User.Email)" Title="Full Name">
            <EditTemplate Context="user">
                <RadzenTextBox @bind-Value="user.Email" Style="width:200px; display: block" Name="Email" aria-label="Enter email" />
                <RadzenRequiredValidator Text="Email is required" Component="Email" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(User.Phone)" Title="Full Name">
            <EditTemplate Context="user">
                <RadzenTextBox @bind-Value="user.Phone" Style="width:200px; display: block" Name="Phone" aria-label="Enter phone" />
                <RadzenRequiredValidator Text="Phone is required" Component="Phone" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Context="user" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="user">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" Click="@(args => EditRow(user))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="Radzen.ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(user))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="user">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" Click="@((args) => SaveRow(user))" aria-label="Save">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(user))" aria-label="Cancel">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="Radzen.ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(user))" aria-label="Delete">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>

@code {

    RadzenDataGrid<UserDTO> userGrid;
    IEnumerable<UserDTO> users;

    DataGridEditMode editMode = DataGridEditMode.Single;

    List<UserDTO> usersToInsert = [];
    List<UserDTO> usersToUpdate = [];

    protected override async Task OnInitializedAsync()
    {
        // users = await client.GetUsersAsync();
        var userlist = new List<UserDTO>();
        userlist.Add(new UserDTO { UserID = 1, FullName = "james", Email = "emial", Phone = "223123" });
        users = userlist;
    }

    void Reset()
    {
        usersToInsert.Clear();
        usersToUpdate.Clear();
    }

    void Reset(UserDTO user)
    {
        usersToInsert.Remove(user);
        usersToUpdate.Remove(user);
    }

    async Task EditRow(UserDTO user)
    {
        if (editMode == DataGridEditMode.Single && usersToInsert.Count() > 0)
        {
            Reset();
        }

        usersToUpdate.Add(user);
        await userGrid.EditRow(user);
    }

    void OnUpdateRow(UserDTO user)
    {
        Reset(user);

        // dbContext.Update(log);

        // dbContext.SaveChanges();
    }

    async Task SaveRow(UserDTO user)
    {
        await userGrid.UpdateRow(user);
    }

    void CancelEdit(UserDTO user)
    {
        Reset(user);

        userGrid.CancelEditRow(user);

        // var orderEntry = dbContext.Entry(log);
        // if (orderEntry.State == EntityState.Modified)
        // {
        //     orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //     orderEntry.State = EntityState.Unchanged;
        // }
    }

    async Task DeleteRow(UserDTO user)
    {
        Reset(user);

        if (users.Contains(user))
        {
            // dbContext.Remove<Log>(log);

            // dbContext.SaveChanges();

            await userGrid.Reload();
        }
        else
        {
            userGrid.CancelEditRow(user);
            await userGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var user = new UserDTO();
        usersToInsert.Add(user);
        await userGrid.InsertRow(user);
    }

    public async Task OnCreateRow(UserDTO user)
    {
        // var id = await client.AddUserAsync(user);
        usersToInsert.Remove(user);
    }
}