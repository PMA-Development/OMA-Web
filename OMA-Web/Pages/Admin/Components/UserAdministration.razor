@page "/admin/users/"
@inject OMAClient client
@inject DuendoClient duendoClient
@using UserDTO = OMA_Web.API.UserDTO

<RadzenDataGrid @ref="userGrid" AllowAlternatingRows="false" EditMode="@editMode"
                Data="@users" TItem="UserDTO" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px"
                FilterMode="FilterMode.Simple" AllowVirtualization="true" Style="height:90vh"
                AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                AllowSorting="true">

    <HeaderTemplate>
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add New User" Click="@InsertRow" Disabled="@(editMode == DataGridEditMode.Single && usersToInsert.Count() > 0)" />
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn Property="@nameof(UserDTO.UserID)" Title="User ID" Width="120px" Frozen="true" />
        <RadzenDataGridColumn Property="@nameof(UserDTO.FullName)" Title="Full Name">
            <EditTemplate Context="user">
                <RadzenTextBox @bind-Value="user.FullName" Style="width:200px; display: block" Name="FullName" aria-label="Enter full name" />
                <RadzenRequiredValidator Text="Full name is required" Component="FullName" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(UserDTO.Email)" Title="Email">
            <EditTemplate Context="user">
                <RadzenTextBox @bind-Value="user.Email" Style="width:200px; display: block" Name="Email" aria-label="Enter email" />
                <RadzenRequiredValidator Text="Email is required" Component="Email" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(UserDTO.Phone)" Title="Phone">
            <Template Context="user">
                @String.Format("{0}", user.Phone)
            </Template>
            <EditTemplate Context="user">
                <RadzenNumeric @bind-Value="user.Phone" Style="width:100%" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select order date" }})" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Property="Password" Visible="@isCreating" Title="Password">
            <EditTemplate Context="user">
                <RadzenPassword @bind-Value="password" Style="width:200px; display: block" Name="Password" aria-label="Enter password" />
                <RadzenRequiredValidator Text="Password is required" Component="Password" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Context="user" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="user">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" Click="@(args => EditRow(user))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="Radzen.ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(user))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="user">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" Click="@((args) => SaveRow(user))" aria-label="Save">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(user))" aria-label="Cancel">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="Radzen.ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(user))" aria-label="Delete">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>

@code {

    RadzenDataGrid<UserDTO> userGrid;
    List<UserDTO> users;

    DataGridEditMode editMode = DataGridEditMode.Single;

    List<UserDTO> usersToInsert = [];
    List<UserDTO> usersToUpdate = [];

    private bool isCreating = false;

    private string password = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var inum = await client.GetUsersAsync();
        users = inum.ToList();
    }

    void Reset()
    {
        usersToInsert.Clear();
        usersToUpdate.Clear();
    }

    void Reset(UserDTO user)
    {
        usersToInsert.Remove(user);
        usersToUpdate.Remove(user);
    }

    async Task EditRow(UserDTO user)
    {
        if (editMode == DataGridEditMode.Single && usersToInsert.Count() > 0)
        {
            Reset();
        }

        usersToUpdate.Add(user);
        await userGrid.EditRow(user);
    }

    async void OnUpdateRow(UserDTO user)
    {
        Reset(user);
        API.DuendoAPI.UserDTO dto = new()
            {
                Id = user.UserID,
                Email = user.Email,
                Phone = user.Phone,
                FullName = user.FullName,
                Password = password
            };
        await duendoClient.UpdateUserAsync(dto);
        await client.UpdateUserAsync(user);
    }

    async Task SaveRow(UserDTO user)
    {
        isCreating = false;
        await userGrid.UpdateRow(user);
    }

    void CancelEdit(UserDTO user)
    {
        isCreating = false;
        Reset(user);

        userGrid.CancelEditRow(user);
    }

    async Task DeleteRow(UserDTO user)
    {
        Reset(user);

        if (users.Contains(user))
        {
            await client.DeleteUserAsync(user.UserID);
            
            await userGrid.Reload();
        }
        else
        {
            userGrid.CancelEditRow(user);
            await userGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        isCreating = true;

        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var user = new UserDTO();
        usersToInsert.Add(user);
        await userGrid.InsertRow(user);

    }

    public async Task OnCreateRow(UserDTO user)
    {
        if (IsValidPassword(password))
        {
            API.DuendoAPI.UserDTO dto = new()
            {
                Id = Guid.NewGuid(),
                Email = user.Email,
                Phone = user.Phone,
                FullName = user.FullName,
                Password = password
            };
            user.UserID = dto.Id;

            await duendoClient.CreateUserAsync(dto);
            await client.AddUserAsync(user);
            users.Add(user);
        }
        usersToInsert.Remove(user);
    }

    public bool IsLetter(char c)
    {
        return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
    }

    public bool IsDigit(char c)
    {
        return c >= '0' && c <= '9';
    }

    public bool IsSymbol(char c)
    {
        return c > 32 && c < 127 && !IsDigit(c) && !IsLetter(c);
    }

    public bool IsValidPassword(string password)
    {
        return
           password.Any(c => IsLetter(c)) &&
           password.Any(c => IsDigit(c)) &&
           password.Any(c => IsSymbol(c));
    }
}