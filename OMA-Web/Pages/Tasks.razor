@page "/tasks"
@using System.Security.Claims


<div class="mb-5 d-flex">
    <input class="btn btn-primary" type="button" value="Create Task" @onclick="ShowCreateTask" />
    <input @bind="searchText" placeholder="Search..." class="form-control searchbar" />
</div>

<div class="tasks col-12 flex-column ">
    <div class="col-12 flex-row d-flex justify-content-between">
        @foreach (var item in taskDTOs.Where(x => x.Title.ToLower().Contains(searchText.ToLower())).ToList())
        {
            <div class="card me-5 mb-5">
                <div class="card-title">
                    <h5>@item.Title</h5>
                </div>
                <div class="card-body">
                    <h5><b>Type:</b> @item.Type</h5>
                    <h5><b>Level:</b> @item.Level.ToString().Replace("_", "")</h5>
                    <h5><b>Description:</b>@item.Description</h5>
                    <div class="d-flex justify-content-evenly mt-3">
                        @if (item.UserID == Guid.Empty)
                        {
                            <input type="button" class="btn btn-primary" value="Accept" @onclick="() => {Accept(item);}" />
                        }
                        <input type="button" class="btn btn-primary" value="Escalate" @onclick="() => {ToggleDisplay(item.TaskID);}" />
                        <select class="btn btn-success dropdown-toggle" @onchange="e => {Escalate(item, e.Value!.ToString()!);}" style="display: @(GetDisplayStyle(item.TaskID))">
                            @foreach (var level in Enum.GetValues<LevelEnum>())
                            {
                                @if (level == item.Level)
                                {
                                    <option value="@level" selected>@level.ToString().Replace("_", "")</option>
                                }
                                else {
                                    <option value="@level">@level.ToString().Replace("_", "")</option>
                                }

                            }
                        </select>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<Modal @ref="modal" title="Modal title">

    <BodyTemplate>
        <div class="windmillmodal">
            <EditForm Model="newTask" OnValidSubmit="CreateTask">
                <DataAnnotationsValidator />
                <label>Title: </label>
                <InputText @bind-Value="newTask.Title" class="form-control" />
                <ValidationMessage For=@(() => newTask.Title) />
                <label>Type: </label>
                <InputText @bind-Value="newTask.Type" class="form-control" />
                <ValidationMessage For=@(() => newTask.Type) />
                <label>Level: </label>
                <InputSelect class="form-control" @bind-Value="newTask.Level">
                    @foreach (var item in Enum.GetValues<LevelEnum>())
                    {
                        <option value="@item">@item</option>
                    }
                </InputSelect>
                <label>Description: </label>
                <InputTextArea class="form-control" @bind-Value="newTask.Description" style="max-height:30rem" rows="4" />
                <ValidationMessage For=@(() => newTask.Description) />
                <label>Island: </label>
                <select class="form-control" @onchange="async e => {await IslandChange(e.Value!.ToString()!);}">
                    @foreach(var item in islandDTOs) {
                        <option value="@item.IslandID">@item.Title</option>
                    }
                </select>
                <label>Turbine: </label>
                <select class="form-control" @onchange="e => {TurbineChange(e.Value!.ToString()!);}">
                    @foreach (var item in turbineDTOs)
                    {
                        <option value="@item.TurbineID">@item.Title</option>
                    }
                </select>
                <div class="d-flex flex-row mt-3">
                    <input type="submit" value="Saves" class="btn btn-primary" />
                </div>
            </EditForm>
        </div>
    </BodyTemplate>
</Modal>

@code {
    private Modal modal = default!;

    private TaskDTO newTask = new();

    private List<TaskDTO> taskDTOs = [];
    private IEnumerable<IslandDTO> islandDTOs = [];
    private IEnumerable<TurbineDTO> turbineDTOs = [];

    private string searchText = string.Empty;

    protected override async Task OnInitializedAsync() 
    {
        try
        {
            var list = await client.GetUncompletedTasksAsync();
            taskDTOs = list.ToList();
        }
        catch (Exception)
        {
            toastService.ShowInfo("There are no tasks..");
        }
    }

    public async Task Escalate(TaskDTO item, string level)
    {
        Enum.TryParse(level, out LevelEnum levelEnum);
        item.Level = levelEnum;
        await client.UpdateTaskAsync(item);
    }

    public async Task Accept(TaskDTO item) {
        string claim = string.Empty;
        try
        {
            var authState = await AuthenticationStateProviders.GetAuthenticationStateAsync();
            var user = authState.User;
            claim = user.FindFirst(x => x.Type == "sub").Value;

        }
        catch (Exception)
        {

            throw;
        }

        item.UserID = Guid.Parse(claim);
        await client.UpdateTaskAsync(item);

        toastService.ShowSuccess($"Task {item.Title} accepted" );
    }

    private Dictionary<int, bool> DisplayStates = new Dictionary<int, bool>();

    private void ToggleDisplay(int link)
    {
        if (DisplayStates.ContainsKey(link))
        {
            DisplayStates[link] = !DisplayStates[link];
        }
        else
        {
            DisplayStates[link] = true;
        }
    }

    private string GetDisplayStyle(int link)
    {
        return DisplayStates.ContainsKey(link) && DisplayStates[link] ? "block" : "none";
    }

    public async Task IslandChange(string id) 
    {
        turbineDTOs = await client.GetTurbinesIslandAsync(int.Parse(id));
        newTask.TurbineID = turbineDTOs.FirstOrDefault().TurbineID;
    }

    public async Task ShowCreateTask()
    {
        string claim = string.Empty;
        try
        {
            var authState = await AuthenticationStateProviders.GetAuthenticationStateAsync();
            var user = authState.User;
            claim = user.FindFirst(x => x.Type == "sub")!.Value;

        }
        catch (Exception e)
        {
            throw;
        }

        try
        {
            islandDTOs = await client.GetIslandsAsync();
        }
        catch (Exception)
        {
            toastService.ShowInfo("There are no islands..");
        }

        try
        {
            turbineDTOs = await client.GetTurbinesIslandAsync(islandDTOs.FirstOrDefault().IslandID);
            newTask.TurbineID = turbineDTOs.FirstOrDefault().TurbineID;
        }
        catch (Exception)
        {
            toastService.ShowInfo("There are no turbines..");
        }

        newTask.OwnerID = Guid.Parse(claim);
        newTask.Level = LevelEnum.Hotline1;
        await modal.ShowAsync();
    }

    public void TurbineChange(string id) {
        newTask.TurbineID = int.Parse(id);
    }

    public async Task CreateTask() 
    {
        if (newTask.Level == 0)
        {
            toastService.ShowError("Level most be filed out");
        }
        else 
        {
            taskDTOs.Add(newTask);
            await client.AddTaskAsync(newTask);
            toastService.ShowInfo("Successfully added" + newTask.Title + "Task..");
            newTask = new();
            await modal.HideAsync();
        }
       
    }
}
